apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.unicornstudio.lanball.server.ServerLauncher"

task run(dependsOn: classes, type: JavaExec) {
    args = ["--portx", "łała", "--port", "aa"]
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    doFirst {
        archivesBaseName = "LanBall";
        version = "build";
        from files(sourceSets.main.output.classesDir)
        from files(sourceSets.main.output.resourcesDir)
        from {configurations.compile.collect {zipTree(it)}}
       // from files(project.assetsDir);

        manifest {
            attributes 'Main-Class': project.mainClassName
        }
    }
}

dist.dependsOn classes


task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}
